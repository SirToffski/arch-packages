From e2de00876a7033b6923f912af8d2b0bbd100e113 Mon Sep 17 00:00:00 2001
From: Jan Zielinski <jan.zielinski@intel.com>
Date: Wed, 9 Jun 2021 14:16:23 +0200
Subject: [PATCH 2/6] gallium/swr: Remove common code and build options

This commit removes all OpenSWR references from common Mesa code
and build system.

Reviewed-by: Dylan Baker <dylan@pnwbakers.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/11264>
---
 android/Android.mk                            |  4 +--
 android/mesa3d_cross.mk                       |  3 +--
 meson.build                                   | 12 +++------
 meson_options.txt                             | 15 +----------
 .../target-helpers/inline_sw_helper.h         | 12 ---------
 .../auxiliary/target-helpers/sw_helper.h      | 14 +----------
 src/gallium/meson.build                       |  5 ----
 src/gallium/targets/dri/meson.build           |  4 +--
 src/gallium/targets/libgl-xlib/meson.build    |  2 +-
 src/gallium/targets/osmesa/meson.build        |  3 +--
 src/gallium/targets/pipe-loader/meson.build   |  2 +-
 src/gallium/targets/wgl/wgl.c                 | 25 +------------------
 13 files changed, 15 insertions(+), 90 deletions(-)

diff --git a/android/Android.mk b/android/Android.mk
index bf3253f..de141bf 100644
--- a/android/Android.mk
+++ b/android/Android.mk
@@ -43,7 +43,7 @@ LOCAL_STATIC_LIBRARIES := libexpat libarect libelf
 LOCAL_HEADER_LIBRARIES := libnativebase_headers hwvulkan_headers libbacktrace_headers
 MESON_GEN_PKGCONFIGS := backtrace cutils expat hardware libdrm:$(LIBDRM_VERSION) nativewindow sync zlib:1.2.11 libelf
 
-ifneq ($(filter swr swrast,$(BOARD_MESA3D_GALLIUM_DRIVERS) $(BOARD_MESA3D_VULKAN_DRIVERS)),)
+ifneq ($(filter swrast,$(BOARD_MESA3D_GALLIUM_DRIVERS) $(BOARD_MESA3D_VULKAN_DRIVERS)),)
 MESON_GEN_LLVM_STUB := true
 endif
 
@@ -85,8 +85,6 @@ endif
 
 ifneq ($(MESON_GEN_LLVM_STUB),)
 MESON_LLVM_VERSION := 12.0.0
-# Required for swr gallium target
-MESON_LLVM_IRBUILDER_PATH := external/llvm-project/llvm/include/llvm/IR/IRBuilder.h
 LOCAL_SHARED_LIBRARIES += libLLVM12
 endif
 
diff --git a/android/mesa3d_cross.mk b/android/mesa3d_cross.mk
index e211cb8f269..b3cc09496a0 100644
--- a/android/mesa3d_cross.mk
+++ b/android/mesa3d_cross.mk
@@ -257,8 +257,7 @@ ifneq ($(MESON_GEN_LLVM_STUB),)
 	mkdir -p $(dir $@)/subprojects/llvm/
 	echo -e "project('llvm', 'cpp', version : '$(MESON_LLVM_VERSION)')\n" \
 		"dep_llvm = declare_dependency()\n"                           \
-		"has_rtti = false\n"                                          \
-		"irbuilder_h = files('$(AOSP_ABSOLUTE_PATH)/$(MESON_LLVM_IRBUILDER_PATH)')" > $(dir $@)/subprojects/llvm/meson.build
+		"has_rtti = false\n" > $(dir $@)/subprojects/llvm/meson.build
 endif
 	$(MESON_GEN_NINJA)
 	$(MESON_BUILD)
diff --git a/meson.build b/meson.build
index 8b8ffc95aab..53ec2c2ef95 100644
--- a/meson.build
+++ b/meson.build
@@ -66,7 +66,6 @@ with_aco_tests = get_option('build-aco-tests')
 with_glx_read_only_text = get_option('glx-read-only-text')
 with_glx_direct = get_option('glx-direct')
 with_osmesa = get_option('osmesa')
-with_swr_arches = get_option('swr-arches')
 with_vulkan_overlay_layer = get_option('vulkan-layers').contains('overlay')
 with_vulkan_device_select_layer = get_option('vulkan-layers').contains('device-select')
 with_tools = get_option('tools')
@@ -225,7 +224,6 @@ with_gallium_iris = gallium_drivers.contains('iris')
 with_gallium_i915 = gallium_drivers.contains('i915')
 with_gallium_svga = gallium_drivers.contains('svga')
 with_gallium_virgl = gallium_drivers.contains('virgl')
-with_gallium_swr = gallium_drivers.contains('swr')
 with_gallium_lima = gallium_drivers.contains('lima')
 with_gallium_zink = gallium_drivers.contains('zink')
 with_gallium_d3d12 = gallium_drivers.contains('d3d12')
@@ -1643,8 +1641,6 @@ elif with_clc
   _llvm_version = '>= 10.0.0'
 elif with_gallium_opencl
   _llvm_version = '>= 8.0.0'
-elif with_gallium_swr
-  _llvm_version = '>= 6.0.0'
 else
   _llvm_version = '>= 3.9.0'
 endif
@@ -1691,8 +1687,8 @@ if _llvm != 'disabled'
     modules : llvm_modules,
     optional_modules : llvm_optional_modules,
     required : (
-      with_amd_vk or with_gallium_radeonsi or with_gallium_swr or
-      with_gallium_opencl or with_clc or _llvm == 'enabled'
+      with_amd_vk or with_gallium_radeonsi or with_gallium_opencl or with_clc
+      or _llvm == 'enabled'
     ),
     static : not _shared_llvm,
     method : _llvm_method,
@@ -1710,8 +1706,6 @@ if with_llvm
     pre_args += '-DDRAW_LLVM_AVAILABLE'
   elif with_swrast_vk
     error('Lavapipe requires LLVM draw support.')
-  elif with_gallium_swr
-    error('SWR requires LLVM draw support.')
   endif
 
   if cc.get_id() != 'msvc'
@@ -1745,7 +1739,7 @@ if with_llvm
   endif
 elif with_amd_vk and with_aco_tests
   error('ACO tests require LLVM, but LLVM is disabled.')
-elif with_gallium_radeonsi or with_gallium_swr or with_swrast_vk
+elif with_gallium_radeonsi or with_swrast_vk
   error('The following drivers require LLVM: RadeonSI, SWR, Lavapipe. One of these is enabled, but LLVM is disabled.')
 elif with_gallium_opencl
   error('The OpenCL "Clover" state tracker requires LLVM, but LLVM is disabled.')
diff --git a/meson_options.txt b/meson_options.txt
index 5278e1760ac..00205d10409 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -75,7 +75,7 @@ option(
   choices : [
     'auto', 'kmsro', 'radeonsi', 'r300', 'r600', 'nouveau', 'freedreno',
     'swrast', 'v3d', 'vc4', 'etnaviv', 'tegra', 'i915', 'svga', 'virgl',
-    'swr', 'panfrost', 'iris', 'lima', 'zink', 'd3d12', 'asahi', 'crocus'
+    'panfrost', 'iris', 'lima', 'zink', 'd3d12', 'asahi', 'crocus'
   ],
   description : 'List of gallium drivers to build. If this is set to auto all drivers applicable to the target OS/architecture will be built'
 )
@@ -412,19 +412,6 @@ option(
   choices : ['8', '16', '32'],
   description : 'Number of channel bits for OSMesa.'
 )
-option(
-  'swr-arches',
-  type : 'array',
-  value : ['avx', 'avx2'],
-  choices : ['avx', 'avx2', 'knl', 'skx'],
-  description : 'Architectures to build SWR support for.',
-)
-option(
-  'shared-swr',
-  type : 'boolean',
-  value : true,
-  description : 'Whether to link SWR shared or statically.',
-)
 
 option(
   'tools',
diff --git a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
index 4fb74993d0b..73e8551aa60 100644
--- a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
+++ b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
@@ -8,10 +8,6 @@
 #include "frontend/sw_winsys.h"
 #include "target-helpers/inline_debug_helper.h"
 
-#ifdef GALLIUM_SWR
-#include "swr/swr_public.h"
-#endif
-
 /* Helper function to choose and instantiate one of the software rasterizers:
  * llvmpipe, softpipe.
  */
@@ -60,11 +56,6 @@ sw_screen_create_named(struct sw_winsys *winsys, const char *driver)
       screen = softpipe_create_screen(winsys);
 #endif
 
-#if defined(GALLIUM_SWR)
-   if (screen == NULL && strcmp(driver, "swr") == 0)
-      screen = swr_create_screen(winsys);
-#endif
-
 #if defined(GALLIUM_ZINK)
    if (screen == NULL && strcmp(driver, "zink") == 0)
       screen = zink_create_screen(winsys);
@@ -102,9 +93,6 @@ sw_screen_create_vk(struct sw_winsys *winsys, bool sw_vk)
 #if defined(GALLIUM_SOFTPIPE)
       (sw_vk ? "" : "softpipe"),
 #endif
-#if defined(GALLIUM_SWR)
-      (sw_vk ? "" : "swr"),
-#endif
 #if defined(GALLIUM_ZINK)
       (sw_vk || only_sw) ? "" : "zink",
 #endif
diff --git a/src/gallium/auxiliary/target-helpers/sw_helper.h b/src/gallium/auxiliary/target-helpers/sw_helper.h
index 059ae2d4422..eed5eeab0dc 100644
--- a/src/gallium/auxiliary/target-helpers/sw_helper.h
+++ b/src/gallium/auxiliary/target-helpers/sw_helper.h
@@ -10,7 +10,7 @@
 
 
 /* Helper function to choose and instantiate one of the software rasterizers:
- * llvmpipe, softpipe, swr.
+ * llvmpipe, softpipe.
  */
 
 #ifdef GALLIUM_ZINK
@@ -33,10 +33,6 @@
 #include "llvmpipe/lp_public.h"
 #endif
 
-#ifdef GALLIUM_SWR
-#include "swr/swr_public.h"
-#endif
-
 #ifdef GALLIUM_VIRGL
 #include "virgl/virgl_public.h"
 #include "virgl/vtest/virgl_vtest_public.h"
@@ -65,11 +61,6 @@ sw_screen_create_named(struct sw_winsys *winsys, const char *driver)
       screen = softpipe_create_screen(winsys);
 #endif
 
-#if defined(GALLIUM_SWR)
-   if (screen == NULL && strcmp(driver, "swr") == 0)
-      screen = swr_create_screen(winsys);
-#endif
-
 #if defined(GALLIUM_ZINK)
    if (screen == NULL && strcmp(driver, "zink") == 0)
       screen = zink_create_screen(winsys);
@@ -106,9 +97,6 @@ sw_screen_create_vk(struct sw_winsys *winsys, bool sw_vk)
 #if defined(GALLIUM_SOFTPIPE)
       sw_vk ? "" : "softpipe",
 #endif
-#if defined(GALLIUM_SWR)
-      sw_vk ? "" : "swr",
-#endif
 #if defined(GALLIUM_ZINK)
       (sw_vk || only_sw) ? "" : "zink",
 #endif
diff --git a/src/gallium/meson.build b/src/gallium/meson.build
index 4da81ddd673..a678dc02705 100644
--- a/src/gallium/meson.build
+++ b/src/gallium/meson.build
@@ -45,11 +45,6 @@ subdir('winsys/sw/wrapper')
 if with_platform_haiku
   subdir('winsys/sw/hgl')
 endif
-if with_gallium_swr
-  subdir('drivers/swr')
-else
-  driver_swr = declare_dependency()
-endif
 if with_gallium_softpipe
   subdir('drivers/softpipe')
   if draw_with_llvm
diff --git a/src/gallium/targets/dri/meson.build b/src/gallium/targets/dri/meson.build
index 948a1b313bd..2d232e51b3c 100644
--- a/src/gallium/targets/dri/meson.build
+++ b/src/gallium/targets/dri/meson.build
@@ -57,7 +57,7 @@ libgallium_dri = shared_library(
     driver_swrast, driver_r300, driver_r600, driver_radeonsi, driver_nouveau,
     driver_kmsro, driver_v3d, driver_vc4, driver_freedreno, driver_etnaviv,
     driver_tegra, driver_i915, driver_svga, driver_virgl,
-    driver_swr, driver_panfrost, driver_iris, driver_lima, driver_zink, driver_d3d12,
+    driver_panfrost, driver_iris, driver_lima, driver_zink, driver_d3d12,
     driver_asahi, driver_crocus
   ],
   # Will be deleted during installation, see install_megadrivers.py
@@ -93,7 +93,7 @@ foreach d : [[with_gallium_kmsro, [
              [with_gallium_radeonsi, 'radeonsi_dri.so'],
              [with_gallium_nouveau, 'nouveau_dri.so'],
              [with_gallium_freedreno, ['msm_dri.so', 'kgsl_dri.so']],
-             [with_gallium_softpipe or with_gallium_swr, 'swrast_dri.so'],
+             [with_gallium_softpipe, 'swrast_dri.so'],
              [with_gallium_softpipe and with_gallium_drisw_kms, 'kms_swrast_dri.so'],
              [with_gallium_v3d, 'v3d_dri.so'],
              [with_gallium_vc4, 'vc4_dri.so'],
diff --git a/src/gallium/targets/libgl-xlib/meson.build b/src/gallium/targets/libgl-xlib/meson.build
index 0c38586c943..f22c6eefdfb 100644
--- a/src/gallium/targets/libgl-xlib/meson.build
+++ b/src/gallium/targets/libgl-xlib/meson.build
@@ -52,7 +52,7 @@ libgl = shared_library(
     libxlib, libws_xlib, libglapi_static,
     libgallium, libmesa, gallium_xlib_link_with,
   ],
-  dependencies : [dep_x11, dep_thread, dep_clock, dep_unwind, driver_swrast, driver_swr, driver_virgl, driver_asahi],
+  dependencies : [dep_x11, dep_thread, dep_clock, dep_unwind, driver_swrast, driver_virgl, driver_asahi],
   install : true,
   version : '1.5.0',
   darwin_versions: '4.0.0',
diff --git a/src/gallium/targets/osmesa/meson.build b/src/gallium/targets/osmesa/meson.build
index b29e3ff0340..38fcaca13b9 100644
--- a/src/gallium/targets/osmesa/meson.build
+++ b/src/gallium/targets/osmesa/meson.build
@@ -54,8 +54,7 @@ libosmesa = shared_library(
     libmesa, libgallium, libws_null, osmesa_link_with,
   ],
   dependencies : [
-    dep_ws2_32, dep_selinux, dep_thread, dep_clock, dep_unwind,
-    driver_swrast, driver_swr,
+    dep_ws2_32, dep_selinux, dep_thread, dep_clock, dep_unwind, driver_swrast
   ],
   name_prefix : host_machine.system() == 'windows' ? '' : 'lib',  # otherwise mingw will create libosmesa.dll
   soversion : host_machine.system() == 'windows' ? '' : '8',
diff --git a/src/gallium/targets/pipe-loader/meson.build b/src/gallium/targets/pipe-loader/meson.build
index 5e0ce239384..1d38c1a5b1b 100644
--- a/src/gallium/targets/pipe-loader/meson.build
+++ b/src/gallium/targets/pipe-loader/meson.build
@@ -67,7 +67,7 @@ pipe_loaders = [
   [with_gallium_freedreno, 'msm', driver_freedreno, []],
   [with_gallium_kmsro, 'kmsro', _kmsro_targets, []],
   [with_gallium_svga, 'vmwgfx', driver_svga, []],
-  [with_gallium_softpipe, 'swrast', [driver_swrast, driver_swr], [libwsw, libws_null]],
+  [with_gallium_softpipe, 'swrast', driver_swrast, [libwsw, libws_null]],
 ]
 
 foreach x : pipe_loaders
diff --git a/src/gallium/targets/wgl/wgl.c b/src/gallium/targets/wgl/wgl.c
index db8f59813b5..6d976c36654 100644
--- a/src/gallium/targets/wgl/wgl.c
+++ b/src/gallium/targets/wgl/wgl.c
@@ -56,9 +56,6 @@
 #include "llvmpipe/lp_public.h"
 #endif
 
-#ifdef GALLIUM_SWR
-#include "swr/swr_public.h"
-#endif
 #ifdef GALLIUM_D3D12
 #include "d3d12/wgl/d3d12_wgl_public.h"
 #endif
@@ -70,9 +67,6 @@
 #ifdef GALLIUM_LLVMPIPE
 static boolean use_llvmpipe = FALSE;
 #endif
-#ifdef GALLIUM_SWR
-static boolean use_swr = FALSE;
-#endif
 #ifdef GALLIUM_D3D12
 static boolean use_d3d12 = FALSE;
 #endif
@@ -94,13 +88,6 @@ wgl_screen_create_by_name(HDC hDC, const char* driver, struct sw_winsys *winsys)
          use_llvmpipe = TRUE;
    }
 #endif
-#ifdef GALLIUM_SWR
-   if (strcmp(driver, "swr") == 0) {
-      screen = swr_create_screen(winsys);
-      if (screen)
-         use_swr = TRUE;
-   }
-#endif
 #ifdef GALLIUM_D3D12
    if (strcmp(driver, "d3d12") == 0) {
       screen = d3d12_wgl_create_screen(winsys, hDC);
@@ -142,14 +129,11 @@ wgl_screen_create(HDC hDC)
 #if defined(GALLIUM_LLVMPIPE)
       "llvmpipe",
 #endif
-#if GALLIUM_SWR
-      "swr",
-#endif
 #if defined(GALLIUM_SOFTPIPE)
       "softpipe",
 #endif
    };
-   
+
    /* If the default driver screen creation fails, fall back to the next option in the
     * sorted list. Don't do this if GALLIUM_DRIVER is specified.
     */
@@ -196,13 +180,6 @@ wgl_present(struct pipe_screen *screen,
    }
 #endif
 
-#ifdef GALLIUM_SWR
-   if (use_swr) {
-      swr_gdi_swap(screen, ctx, res, hDC);
-      return;
-   }
-#endif
-
 #ifdef GALLIUM_D3D12
    if (use_d3d12) {
       d3d12_wgl_present(screen, ctx, res, hDC);
-- 
GitLab


From ce4c96ea1bce9f2f85fccc33bda9277bd6339139 Mon Sep 17 00:00:00 2001
From: Jan Zielinski <jan.zielinski@intel.com>
Date: Thu, 10 Jun 2021 13:16:04 +0200
Subject: [PATCH 3/6] gallium/swr: clean up the documentation after SWR removal
 from main

Reviewed-by: Dylan Baker <dylan@pnwbakers.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/11264>
---
 docs/conf.py                       |   5 -
 docs/drivers/openswr.rst           |  24 -----
 docs/drivers/openswr/faq.rst       | 141 -----------------------------
 docs/drivers/openswr/knobs.rst     | 114 -----------------------
 docs/drivers/openswr/profiling.rst |  67 --------------
 docs/drivers/openswr/usage.rst     |  38 --------
 docs/envvars.rst                   |   3 +-
 docs/features.txt                  | 138 ++++++++++++++--------------
 docs/history.rst                   |   3 +-
 docs/index.rst                     |   1 -
 docs/meson.rst                     |   1 -
 docs/sourcetree.rst                |   1 -
 docs/systems.rst                   |   2 -
 13 files changed, 71 insertions(+), 467 deletions(-)
 delete mode 100644 docs/drivers/openswr.rst
 delete mode 100644 docs/drivers/openswr/faq.rst
 delete mode 100644 docs/drivers/openswr/knobs.rst
 delete mode 100644 docs/drivers/openswr/profiling.rst
 delete mode 100644 docs/drivers/openswr/usage.rst

diff --git a/docs/conf.py b/docs/conf.py
index ba789390467..998f209e998 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -139,11 +139,6 @@ html_redirects = [
   ('gallium/drivers/freedreno', 'drivers/freedreno.html'),
   ('gallium/drivers/freedreno/ir3-notes', 'drivers/freedreno/ir3-notes.html'),
   ('gallium/drivers/llvmpipe', 'drivers/llvmpipe.html'),
-  ('gallium/drivers/openswr', 'drivers/openswr.html'),
-  ('gallium/drivers/openswr/faq', 'drivers/openswr/faq.html'),
-  ('gallium/drivers/openswr/knobs', 'drivers/openswr/knobs.html'),
-  ('gallium/drivers/openswr/profiling', 'drivers/openswr/profiling.html'),
-  ('gallium/drivers/openswr/usage', 'drivers/openswr/usage.html'),
   ('gallium/drivers/zink', 'drivers/zink.html'),
   ('llvmpipe', 'drivers/llvmpipe.html'),
   ('postprocess', 'gallium/postprocess.html'),
diff --git a/docs/drivers/openswr.rst b/docs/drivers/openswr.rst
deleted file mode 100644
index 4435219c8a1..00000000000
--- a/docs/drivers/openswr.rst
+++ /dev/null
@@ -1,24 +0,0 @@
-OpenSWR
-=======
-
-The Gallium OpenSWR driver is a high performance, highly scalable
-software renderer targeted towards visualization workloads.  For such
-geometry heavy workloads there is a considerable speedup over llvmpipe,
-which is to be expected as the geometry frontend of llvmpipe is single
-threaded.
-
-This rasterizer is x86 specific and requires AVX or above.  The driver
-fits into the gallium framework, and reuses gallivm for doing the TGSI
-to vectorized llvm-IR conversion of the shader kernels.
-
-You can read more about OpenSWR on the `project website
-<https://www.openswr.org/>`__.
-
-.. toctree::
-   :glob:
-
-   openswr/usage
-   openswr/faq
-   openswr/profiling
-   openswr/knobs
-
diff --git a/docs/drivers/openswr/faq.rst b/docs/drivers/openswr/faq.rst
deleted file mode 100644
index 1d058f92222..00000000000
--- a/docs/drivers/openswr/faq.rst
+++ /dev/null
@@ -1,141 +0,0 @@
-FAQ
-===
-
-Why another software rasterizer?
---------------------------------
-
-Good question, given there are already three (swrast, softpipe,
-llvmpipe) in the Mesa tree. Two important reasons for this:
-
- * Architecture - given our focus on scientific visualization, our
-   workloads are much different than the typical game; we have heavy
-   vertex load and relatively simple shaders.  In addition, the core
-   counts of machines we run on are much higher.  These parameters led
-   to design decisions much different than llvmpipe.
-
- * Historical - Intel had developed a high performance software
-   graphics stack for internal purposes.  Later we adapted this
-   graphics stack for use in visualization and decided to move forward
-   with Mesa to provide a high quality API layer while at the same
-   time benefiting from the excellent performance the software
-   rasterizerizer gives us.
-
-What's the architecture?
-------------------------
-
-SWR is a tile based immediate mode renderer with a sort-free threading
-model which is arranged as a ring of queues.  Each entry in the ring
-represents a draw context that contains all of the draw state and work
-queues.  An API thread sets up each draw context and worker threads
-will execute both the frontend (vertex/geometry processing) and
-backend (fragment) work as required.  The ring allows for backend
-threads to pull work in order.  Large draws are split into chunks to
-allow vertex processing to happen in parallel, with the backend work
-pickup preserving draw ordering.
-
-Our pipeline uses just-in-time compiled code for the fetch shader that
-does vertex attribute gathering and AOS to SOA conversions, the vertex
-shader and fragment shaders, streamout, and fragment blending. SWR
-core also supports geometry and compute shaders but we haven't exposed
-them through our driver yet. The fetch shader, streamout, and blend is
-built internally to swr core using LLVM directly, while for the vertex
-and pixel shaders we reuse bits of llvmpipe from
-``gallium/auxiliary/gallivm`` to build the kernels, which we wrap
-differently than llvmpipe's ``auxiliary/draw`` code.
-
-What's the performance?
------------------------
-
-For the types of high-geometry workloads we're interested in, we are
-significantly faster than llvmpipe.  This is to be expected, as
-llvmpipe only threads the fragment processing and not the geometry
-frontend.  The performance advantage over llvmpipe roughly scales
-linearly with the number of cores available.
-
-While our current performance is quite good, we know there is more
-potential in this architecture.  When we switched from a prototype
-OpenGL driver to Mesa we regressed performance severely, some due to
-interface issues that need tuning, some differences in shader code
-generation, and some due to conformance and feature additions to the
-core swr.  We are looking to recovering most of this performance back.
-
-What's the conformance?
------------------------
-
-The major applications we are targeting are all based on the
-Visualization Toolkit (VTK), and as such our development efforts have
-been focused on making sure these work as best as possible.  Our
-current code passes vtk's rendering tests with their new "OpenGL2"
-(really OpenGL 3.2) backend at 99%.
-
-piglit testing shows a much lower pass rate, roughly 80% at the time
-of writing.  Core SWR undergoes rigorous unit testing and we are quite
-confident in the rasterizer, and understand the areas where it
-currently has issues (example: line rendering is done with triangles,
-so doesn't match the strict line rendering rules).  The majority of
-the piglit failures are errors in our driver layer interfacing Mesa
-and SWR.  Fixing these issues is one of our major future development
-goals.
-
-Why are you open sourcing this?
--------------------------------
-
- * Our customers prefer open source, and allowing them to simply
-   download the Mesa source and enable our driver makes life much
-   easier for them.
-
- * The internal gallium APIs are not stable, so we'd like our driver
-   to be visible for changes.
-
- * It's easier to work with the Mesa community when the source we're
-   working with can be used as reference.
-
-What are your development plans?
---------------------------------
-
- * Performance - see the performance section earlier for details.
-
- * Conformance - see the conformance section earlier for details.
-
- * Features - core SWR has a lot of functionality we have yet to
-   expose through our driver, such as MSAA, geometry shaders, compute
-   shaders, and tesselation.
-
- * AVX512 support
-
-What is the licensing of the code?
-----------------------------------
-
- * All code is under the normal Mesa MIT license.
-
-Will this work on AMD?
-----------------------
-
- * If using an AMD processor with AVX or AVX2, it should work though
-   we don't have that hardware around to test.  Patches if needed
-   would be welcome.
-
-Will this work on ARM, MIPS, POWER, <other non-x86 architecture>?
--------------------------------------------------------------------------
-
- * Not without a lot of work.  We make extensive use of AVX and AVX2
-   intrinsics in our code and the in-tree JIT creation.  It is not the
-   intention for this codebase to support non-x86 architectures.
-
-What hardware do I need?
-------------------------
-
- * Any x86 processor with at least AVX (introduced in the Intel
-   SandyBridge and AMD Bulldozer microarchitectures in 2011) will
-   work.
-
- * You don't need a fire-breathing Xeon machine to work on SWR - we do
-   day-to-day development with laptops and desktop CPUs.
-
-Does one build work on both AVX and AVX2?
------------------------------------------
-
-Yes. The build system creates two shared libraries, ``libswrAVX.so`` and
-``libswrAVX2.so``, and ``swr_create_screen()`` loads the appropriate one at
-runtime.
-
diff --git a/docs/drivers/openswr/knobs.rst b/docs/drivers/openswr/knobs.rst
deleted file mode 100644
index 06f228a2e92..00000000000
--- a/docs/drivers/openswr/knobs.rst
+++ /dev/null
@@ -1,114 +0,0 @@
-﻿Knobs
-=====
-
-OpenSWR has a number of environment variables which control its
-operation, in addition to the normal Mesa and gallium controls.
-
-.. envvar:: KNOB_ENABLE_ASSERT_DIALOGS <bool> (true)
-
-Use dialogs when asserts fire. Asserts are only enabled in debug builds
-
-.. envvar:: KNOB_SINGLE_THREADED <bool> (false)
-
-If enabled will perform all rendering on the API thread. This is useful mainly for debugging purposes.
-
-.. envvar:: KNOB_DUMP_SHADER_IR <bool> (false)
-
-Dumps shader LLVM IR at various stages of jit compilation.
-
-.. envvar:: KNOB_USE_GENERIC_STORETILE <bool> (false)
-
-Always use generic function for performing StoreTile. Will be slightly slower than using optimized (jitted) path
-
-.. envvar:: KNOB_FAST_CLEAR <bool> (true)
-
-Replace 3D primitive execute with a SWRClearRT operation and defer clear execution to first backend op on hottile, or hottile store
-
-.. envvar:: KNOB_MAX_NUMA_NODES <uint32_t> (0)
-
-Maximum # of NUMA-nodes per system used for worker threads   0 == ALL NUMA-nodes in the system   N == Use at most N NUMA-nodes for rendering
-
-.. envvar:: KNOB_MAX_CORES_PER_NUMA_NODE <uint32_t> (0)
-
-Maximum # of cores per NUMA-node used for worker threads.   0 == ALL non-API thread cores per NUMA-node   N == Use at most N cores per NUMA-node
-
-.. envvar:: KNOB_MAX_THREADS_PER_CORE <uint32_t> (1)
-
-Maximum # of (hyper)threads per physical core used for worker threads.   0 == ALL hyper-threads per core   N == Use at most N hyper-threads per physical core
-
-.. envvar:: KNOB_MAX_WORKER_THREADS <uint32_t> (0)
-
-Maximum worker threads to spawn.  IMPORTANT: If this is non-zero, no worker threads will be bound to specific HW threads.  They will all be "floating" SW threads. In this case, the above 3 KNOBS will be ignored.
-
-.. envvar:: KNOB_BUCKETS_START_FRAME <uint32_t> (1200)
-
-Frame from when to start saving buckets data.  NOTE: KNOB_ENABLE_RDTSC must be enabled in core/knobs.h for this to have an effect.
-
-.. envvar:: KNOB_BUCKETS_END_FRAME <uint32_t> (1400)
-
-Frame at which to stop saving buckets data.  NOTE: KNOB_ENABLE_RDTSC must be enabled in core/knobs.h for this to have an effect.
-
-.. envvar:: KNOB_WORKER_SPIN_LOOP_COUNT <uint32_t> (5000)
-
-Number of spin-loop iterations worker threads will perform before going to sleep when waiting for work
-
-.. envvar:: KNOB_MAX_DRAWS_IN_FLIGHT <uint32_t> (160)
-
-Maximum number of draws outstanding before API thread blocks.
-
-.. envvar:: KNOB_MAX_PRIMS_PER_DRAW <uint32_t> (2040)
-
-Maximum primitives in a single Draw(). Larger primitives are split into smaller Draw calls. Should be a multiple of (3 * vectorWidth).
-
-.. envvar:: KNOB_MAX_TESS_PRIMS_PER_DRAW <uint32_t> (16)
-
-Maximum primitives in a single Draw() with tessellation enabled. Larger primitives are split into smaller Draw calls. Should be a multiple of (vectorWidth).
-
-.. envvar:: KNOB_MAX_FRAC_ODD_TESS_FACTOR <float> (63.0f)
-
-(DEBUG) Maximum tessellation factor for fractional-odd partitioning.
-
-.. envvar:: KNOB_MAX_FRAC_EVEN_TESS_FACTOR <float> (64.0f)
-
-(DEBUG) Maximum tessellation factor for fractional-even partitioning.
-
-.. envvar:: KNOB_MAX_INTEGER_TESS_FACTOR <uint32_t> (64)
-
-(DEBUG) Maximum tessellation factor for integer partitioning.
-
-.. envvar:: KNOB_BUCKETS_ENABLE_THREADVIZ <bool> (false)
-
-Enable threadviz output.
-
-.. envvar:: KNOB_TOSS_DRAW <bool> (false)
-
-Disable per-draw/dispatch execution
-
-.. envvar:: KNOB_TOSS_QUEUE_FE <bool> (false)
-
-Stop per-draw execution at worker FE  NOTE: Requires KNOB_ENABLE_TOSS_POINTS to be enabled in core/knobs.h
-
-.. envvar:: KNOB_TOSS_FETCH <bool> (false)
-
-Stop per-draw execution at vertex fetch  NOTE: Requires KNOB_ENABLE_TOSS_POINTS to be enabled in core/knobs.h
-
-.. envvar:: KNOB_TOSS_IA <bool> (false)
-
-Stop per-draw execution at input assembler  NOTE: Requires KNOB_ENABLE_TOSS_POINTS to be enabled in core/knobs.h
-
-.. envvar:: KNOB_TOSS_VS <bool> (false)
-
-Stop per-draw execution at vertex shader  NOTE: Requires KNOB_ENABLE_TOSS_POINTS to be enabled in core/knobs.h
-
-.. envvar:: KNOB_TOSS_SETUP_TRIS <bool> (false)
-
-Stop per-draw execution at primitive setup  NOTE: Requires KNOB_ENABLE_TOSS_POINTS to be enabled in core/knobs.h
-
-.. envvar:: KNOB_TOSS_BIN_TRIS <bool> (false)
-
-Stop per-draw execution at primitive binning  NOTE: Requires KNOB_ENABLE_TOSS_POINTS to be enabled in core/knobs.h
-
-.. envvar:: KNOB_TOSS_RS <bool> (false)
-
-Stop per-draw execution at rasterizer  NOTE: Requires KNOB_ENABLE_TOSS_POINTS to be enabled in core/knobs.h
-
diff --git a/docs/drivers/openswr/profiling.rst b/docs/drivers/openswr/profiling.rst
deleted file mode 100644
index 357754c3506..00000000000
--- a/docs/drivers/openswr/profiling.rst
+++ /dev/null
@@ -1,67 +0,0 @@
-Profiling
-=========
-
-OpenSWR contains built-in profiling  which can be enabled
-at build time to provide insight into performance tuning.
-
-To enable this, uncomment the following line in ``rasterizer/core/knobs.h`` and rebuild: ::
-
-  //#define KNOB_ENABLE_RDTSC
-
-Running an application will result in a ``rdtsc.txt`` file being
-created in current working directory.  This file contains profile
-information captured between the ``KNOB_BUCKETS_START_FRAME`` and
-``KNOB_BUCKETS_END_FRAME`` (see knobs section).
-
-The resulting file will contain sections for each thread with a
-hierarchical breakdown of the time spent in the various operations.
-For example: ::
-
- Thread 0 (API)
-  %Tot   %Par  Cycles     CPE        NumEvent   CPE2       NumEvent2  Bucket
-   0.00   0.00 28370      2837       10         0          0          APIClearRenderTarget
-   0.00  41.23 11698      1169       10         0          0          |-> APIDrawWakeAllThreads
-   0.00  18.34 5202       520        10         0          0          |-> APIGetDrawContext
-  98.72  98.72 12413773688 29957      414380     0          0          APIDraw
-   0.36   0.36 44689364   107        414380     0          0          |-> APIDrawWakeAllThreads
-  96.36  97.62 12117951562 9747       1243140    0          0          |-> APIGetDrawContext
-   0.00   0.00 19904      995        20         0          0          APIStoreTiles
-   0.00   7.88 1568       78         20         0          0          |-> APIDrawWakeAllThreads
-   0.00  25.28 5032       251        20         0          0          |-> APIGetDrawContext
-   1.28   1.28 161344902  64         2486370    0          0          APIGetDrawContext
-   0.00   0.00 50368      2518       20         0          0          APISync
-   0.00   2.70 1360       68         20         0          0          |-> APIDrawWakeAllThreads
-   0.00  65.27 32876      1643       20         0          0          |-> APIGetDrawContext
-
-
- Thread 1 (WORKER)
-  %Tot   %Par  Cycles     CPE        NumEvent   CPE2       NumEvent2  Bucket
-  83.92  83.92 13198987522 96411      136902     0          0          FEProcessDraw
-  24.91  29.69 3918184840 167        23410158   0          0          |-> FEFetchShader
-  11.17  13.31 1756972646 75         23410158   0          0          |-> FEVertexShader
-   8.89  10.59 1397902996 59         23410161   0          0          |-> FEPAAssemble
-  19.06  22.71 2997794710 384        7803387    0          0          |-> FEClipTriangles
-  11.67  61.21 1834958176 235        7803387    0          0              |-> FEBinTriangles
-   0.00   0.00 0          0          187258     0          0                  |-> FECullZeroAreaAndBackface
-   0.00   0.00 0          0          60051033   0          0                  |-> FECullBetweenCenters
-   0.11   0.11 17217556   2869592    6          0          0          FEProcessStoreTiles
-  15.97  15.97 2511392576 73665      34092      0          0          WorkerWorkOnFifoBE
-  14.04  87.95 2208687340 9187       240408     0          0          |-> WorkerFoundWork
-   0.06   0.43 9390536    13263      708        0          0              |-> BELoadTiles
-   0.00   0.01 293020     182        1609       0          0              |-> BEClear
-  12.63  89.94 1986508990 949        2093014    0          0              |-> BERasterizeTriangle
-   2.37  18.75 372374596  177        2093014    0          0                  |-> BETriangleSetup
-   0.42   3.35 66539016   31         2093014    0          0                  |-> BEStepSetup
-   0.00   0.00 0          0          21766      0          0                  |-> BETrivialReject
-   1.05   8.33 165410662  79         2071248    0          0                  |-> BERasterizePartial
-   6.06  48.02 953847796  1260       756783     0          0                  |-> BEPixelBackend
-   0.20   3.30 31521202   41         756783     0          0                      |-> BESetup
-   0.16   2.69 25624304   33         756783     0          0                      |-> BEBarycentric
-   0.18   2.92 27884986   36         756783     0          0                      |-> BEEarlyDepthTest
-   0.19   3.20 30564174   41         744058     0          0                      |-> BEPixelShader
-   0.26   4.30 41058646   55         744058     0          0                      |-> BEOutputMerger
-   1.27  20.94 199750822  32         6054264    0          0                      |-> BEEndTile
-   0.33   2.34 51758160   23687      2185       0          0              |-> BEStoreTiles
-   0.20  60.22 31169500   28807      1082       0          0                  |-> B8G8R8A8_UNORM
-   0.00   0.00 302752     302752     1          0          0          WorkerWaitForThreadEvent
-
diff --git a/docs/drivers/openswr/usage.rst b/docs/drivers/openswr/usage.rst
deleted file mode 100644
index 1fb5e04a13b..00000000000
--- a/docs/drivers/openswr/usage.rst
+++ /dev/null
@@ -1,38 +0,0 @@
-Usage
-=====
-
-Requirements
-^^^^^^^^^^^^
-
-* An x86 processor with AVX or above
-* LLVM version 3.9 or later
-* C++14 capable compiler
-
-Building
-^^^^^^^^
-
-To build with GNU automake, select building the swr driver at
-configure time, for example: ::
-
-  configure --with-gallium-drivers=swrast,swr
-
-Using
-^^^^^
-
-On Linux, building with autotools will create a drop-in alternative
-for libGL.so into::
-
-  lib/gallium/libGL.so
-  lib/gallium/libswrAVX.so
-  lib/gallium/libswrAVX2.so
-
-To use it set the LD_LIBRARY_PATH environment variable accordingly.
-
-**IMPORTANT:** Mesa will default to using llvmpipe or softpipe as the default software renderer.  To select the OpenSWR driver, set the GALLIUM_DRIVER environment variable appropriately: ::
-
-  GALLIUM_DRIVER=swr
-
-To verify OpenSWR is being used, check to see if a message like the following is printed when the application is started: ::
-
-  SWR detected AVX2
-
diff --git a/docs/envvars.rst b/docs/envvars.rst
index 9a29c168f86..1068f6dd79d 100644
--- a/docs/envvars.rst
+++ b/docs/envvars.rst
@@ -449,8 +449,7 @@ Gallium environment variables
    files.
 :envvar:`GALLIUM_DRIVER`
    useful in combination with :envvar:`LIBGL_ALWAYS_SOFTWARE`=`true` for
-   choosing one of the software renderers ``softpipe``, ``llvmpipe`` or
-   ``swr``.
+   choosing one of the software renderers ``softpipe`` or ``llvmpipe``.
 :envvar:`GALLIUM_LOG_FILE`
    specifies a file for logging all errors, warnings, etc. rather than
    stderr.
diff --git a/docs/history.rst b/docs/history.rst
index 276f2a52f07..3c167f54a4d 100644
--- a/docs/history.rst
+++ b/docs/history.rst
@@ -88,8 +88,7 @@ Ongoing: Mesa is the OpenGL implementation for devices designed by
 Intel, AMD, NVIDIA, Qualcomm, Broadcom, Vivante, plus the VMware and
 VirGL virtual GPUs. There's also several software-based renderers:
 swrast (the legacy Mesa rasterizer), softpipe (a Gallium reference
-driver), llvmpipe (LLVM/JIT-based high-speed rasterizer) and swr
-(another LLVM-based driver).
+driver) and llvmpipe (LLVM/JIT-based high-speed rasterizer).
 
 Work continues on the drivers and core Mesa to implement newer versions
 of the OpenGL, OpenGL ES and Vulkan specifications.
diff --git a/docs/index.rst b/docs/index.rst
index 1cad5402dc9..2335981112e 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -87,7 +87,6 @@ Linux, FreeBSD, and other operating systems.
    drivers/freedreno
    drivers/lima
    drivers/llvmpipe
-   drivers/openswr
    drivers/panfrost
    drivers/svga3d
    drivers/v3d
diff --git a/docs/meson.rst b/docs/meson.rst
index d19bb94e35a..2baeec81a85 100644
--- a/docs/meson.rst
+++ b/docs/meson.rst
@@ -296,7 +296,6 @@ The wrap file must define the following:
 It may also define:
 
 -  ``irbuilder_h``: a ``files()`` object pointing to llvm/IR/IRBuilder.h
-   (this is required for SWR)
 -  ``has_rtti``: a ``bool`` that declares whether LLVM was built with
    RTTI. Defaults to true
 
diff --git a/docs/sourcetree.rst b/docs/sourcetree.rst
index 958fe51d7e5..e331232793f 100644
--- a/docs/sourcetree.rst
+++ b/docs/sourcetree.rst
@@ -121,7 +121,6 @@ each directory.
          -  **radeonsi** - Driver for AMD Southern Island and newer (GCN, RDNA).
          -  **softpipe** - Software reference driver.
          -  **svga** - Driver for VMware's SVGA virtual GPU.
-         -  **swr** - Software driver with massively parellel vertex processing.
          -  **tegra** - Driver for NVIDIA Tegra GPUs.
          -  **v3d** - Driver for Broadcom VideoCore 5 and newer.
          -  **vc4** - Driver for Broadcom VideoCore 4.
diff --git a/docs/systems.rst b/docs/systems.rst
index dd253511962..dd057409c32 100644
--- a/docs/systems.rst
+++ b/docs/systems.rst
@@ -42,8 +42,6 @@ Software drivers include:
 -  :doc:`LLVMpipe <drivers/llvmpipe>` - uses LLVM for x86 JIT code generation
    and is multi-threaded
 -  Softpipe - a reference Gallium driver
--  :doc:`OpenSWR <drivers/openswr>` - x86-optimized software renderer
-   for visualization workloads
 
 Additional driver information:
 
-- 
GitLab


From 7dd12694f1507b2c8810f96870ca51f84c6fa719 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Mon, 6 Dec 2021 09:40:37 -0800
Subject: [PATCH 4/6] CODEOWNERS: remove OpenSWR

Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/11264>
---
 CODEOWNERS | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/CODEOWNERS b/CODEOWNERS
index 2f7b0675891..bd299291349 100644
--- a/CODEOWNERS
+++ b/CODEOWNERS
@@ -128,11 +128,6 @@ meson.build @dbaker @eric
 /src/panfrost/vulkan/ @bbrezillon
 /src/gallium/drivers/panfrost/ @alyssa
 
-# SWR
-/src/gallium/drivers/swr/ @jzielins @krzysztof.raszkowski
-/docs/gallium/drivers/openswr.rst @jzielins @krzysztof.raszkowski
-/docs/gallium/drivers/openswr/ @jzielins @krzysztof.raszkowski
-
 # VMware
 /src/gallium/drivers/svga/ @brianp @charmainel
 /src/gallium/winsys/svga/ @thomash @drawat
-- 
GitLab

From 2636e8681a016eea74ad97bba80cc23e121f8384 Mon Sep 17 00:00:00 2001
From: Dylan Baker <dylan.c.baker@intel.com>
Date: Mon, 6 Dec 2021 14:00:42 -0800
Subject: [PATCH 6/6] fixup! gallium/swr: Remove driver source

Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/11264>
---
 src/gallium/targets/wgl/meson.build | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/gallium/targets/wgl/meson.build b/src/gallium/targets/wgl/meson.build
index ed0f3926a7e..92571a7c8f7 100644
--- a/src/gallium/targets/wgl/meson.build
+++ b/src/gallium/targets/wgl/meson.build
@@ -42,7 +42,7 @@ libgallium_wgl = shared_library(
     libgallium, libglsl, libmesa, libwsgdi, libglapi_static, libglapi
   ],
   dependencies : [
-    dep_ws2_32, idep_nir, idep_mesautil, driver_swrast, driver_swr,
+    dep_ws2_32, idep_nir, idep_mesautil, driver_swrast,
     driver_d3d12, driver_zink, winsys_d3d12_wgl
   ],
   link_args : gallium_wgl_link_args,
-- 
GitLab

