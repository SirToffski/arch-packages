pkgbase=qemu+clang
pkgname=(
  qemu+clang
  qemu-headless+clang
  qemu-arch-extra+clang
  qemu-headless-arch-extra+clang
  qemu-block-iscsi+clang
  qemu-block-rbd+clang
  qemu-block-gluster+clang
  qemu-guest-agent+clang
)
pkgdesc="A generic and open source machine emulator and virtualizer"
pkgver=6.2.0
pkgrel=4
arch=(x86_64)
license=(GPL2 LGPL2.1)
url="https://wiki.qemu.org/"
# TODO: consider providing rdma-core
# TODO: consider providing lzfse
makedepends=(
  alsa-lib
  brltty
  bzip2
  cairo
  ceph
  curl
  cdrtools
  dtc
  fuse3
  gcc-libs
  gdk-pixbuf2
  glib2
  glusterfs
  gnutls
  gtk3
  jack
  libaio
  libbpf
  libcacard
  libcap-ng
  libepoxy
  libiscsi
  libnfs
  libpng
  libpulse
  libsasl
  libseccomp
  libslirp
  libssh
  liburing
  libusb
  libx11
  libxkbcommon
  lzo
  mesa
  meson
  ncurses
  ndctl
  numactl
  pam
  python
  python-sphinx
  python-sphinx_rtd_theme
  sdl2
  sdl2_image
  seabios
  snappy
  spice-protocol
  spice
  systemd
  usbredir
  vde2
  virglrenderer
  vte3
  xfsprogs
  zlib
  zstd
)

source=(
  "https://download.qemu.org/qemu-${pkgver}.tar.xz"{,.sig}
  virtiofsd-glibc235.patch::https://github.com/qemu/qemu/commit/7b223e38603de3a75602e14914d26f9d4baf52eb.patch
  qemu-guest-agent.service
  65-kvm.rules
)
sha256sums=('68e15d8e45ac56326e0b9a4afa8b49a3dfe8aba3488221d098c84698bca65b45'
  'SKIP'
  'f9e714e8b310b3e5e492a0fb034476272b3e436fe7fb26a8a9bf7c86eed65bd1'
  'c39bcde4a09165e64419fd2033b3532378bba84d509d39e2d51694d44c1f8d88'
  'a66f0e791b16b03b91049aac61a25950d93e962e1b2ba64a38c6ad7f609b532c')
validpgpkeys=('CEACC9E15534EBABB82D3FA03353C9CEF108B584') # Michael Roth <flukshun@gmail.com>

_llvm=0

prepare() {

  if clang --version 2>/dev/null | grep -iq "clang\s*version\s*[0-9]" && ld.lld --version 2>/dev/null | grep -iq "LLD\s*[0-9]"; then
    _llvm=1
  fi

  mkdir build-{full,headless}
  mkdir -p extra-arch-{full,headless}/usr/{bin,share/qemu}

  patch -d "qemu-${pkgver}" -p1 <"${srcdir:?}/virtiofsd-glibc235.patch" # FS#73856

}

build() {

  _build full

  _build headless \
    --disable-sdl \
    --disable-gtk \
    --disable-vte \
    --disable-brlapi \
    --disable-opengl \
    --disable-virglrenderer \
    --disable-alsa \
    --disable-jack \
    --disable-oss \
    --disable-pa \
    --disable-sdl

}

_build() (

  cd "${srcdir:?}/build-${1:?}" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/build-${1:?} directory! Build Failed! \E[0m"
    exit 1
  )

  if [[ ${_llvm} -eq 1 ]]; then

    CFLAGS="${CFLAGS} -flto=thin"
    CXXFLAGS="${CXXFLAGS} -flto=thin"
    LDFLAGS="${LDFLAGS} -fuse-ld=lld"

  fi

  "${srcdir:?}/qemu-${pkgver}/configure" \
    --prefix=/usr \
    --sysconfdir=/etc \
    --localstatedir=/var \
    --libexecdir=/usr/lib/qemu \
    --smbd=/usr/bin/smbd \
    --enable-modules \
    --enable-sdl \
    --enable-slirp=system \
    --enable-xfsctl \
    "${@:2}"

  ninja

)

package_qemu+clang() {
  depends=(
    alsa-lib libasound.so
    bzip2 libbz2.so
    cairo
    curl libcurl.so
    dtc
    fuse3
    gcc-libs
    gdk-pixbuf2 libgdk_pixbuf-2.0.so
    glib2 libgio-2.0.so libglib-2.0.so libgmodule-2.0.so libgobject-2.0.so
    gnutls
    gtk3 libgdk-3.so libgtk-3.so
    jack libjack.so
    libaio
    libbpf libbpf.so
    libcacard
    libcap-ng libcap-ng.so
    libepoxy
    libjpeg libjpeg.so
    libnfs
    libpng
    libpulse libpulse.so
    libsasl
    libseccomp libseccomp.so
    libslirp libslirp.so
    libssh libssh.so
    libusb libusb-1.0.so
    liburing liburing.so
    libx11
    libxkbcommon libxkbcommon.so
    lzo
    mesa
    ncurses libncursesw.so
    ndctl
    numactl libnuma.so
    pam libpam.so
    pixman libpixman-1.so
    seabios
    sdl2
    sdl2_image
    snappy
    spice libspice-server.so
    systemd-libs libudev.so
    usbredir
    virglrenderer
    vde2
    vte3 libvte-2.91.so
    zlib
    zstd libzstd.so
  )
  optdepends=(
    'brltty: for braille device support'
    'qemu-arch-extra: extra architectures support'
  )
  provides=(qemu-headless qemu "qemu=${pkgver}")
  conflicts=(qemu-headless qemu)
  replaces=(qemu-kvm)

  _package full

}

package_qemu-headless+clang() {

  pkgdesc="QEMU without GUI"
  depends=(
    bzip2 libbz2.so
    curl libcurl.so
    dtc
    fuse3
    gcc-libs
    glib2 libgio-2.0.so libglib-2.0.so libgmodule-2.0.so libgobject-2.0.so
    gnutls
    libaio
    libbpf libbpf.so
    libcacard
    libcap-ng libcap-ng.so
    libjpeg libjpeg.so
    libnfs
    libpng
    libsasl
    libseccomp libseccomp.so
    libslirp libslirp.so
    libssh libssh.so
    libusb libusb-1.0.so
    liburing liburing.so
    libxkbcommon libxkbcommon.so
    lzo
    ndctl
    numactl libnuma.so
    ncurses libncursesw.so
    pam libpam.so
    pixman libpixman-1.so
    seabios
    snappy
    spice libspice-server.so
    systemd-libs libudev.so
    usbredir
    vde2
    zlib
    zstd libzstd.so
  )

  provides=(qemu-headless "qemu-headless=${pkgver}")
  conflicts=(qemu-headless)
  optdepends=('qemu-headless-arch-extra: extra architectures support')

  _package headless

}

_package() {

  optdepends+=('samba: SMB/CIFS server support'
    'qemu-block-iscsi: iSCSI block support'
    'qemu-block-rbd: RBD block support'
    'qemu-block-gluster: glusterfs block support')
  install=qemu.install
  options=(!emptydirs)

  DESTDIR="${pkgdir:?}" ninja -C "build-${1:?}" install "${@:2}"

  # systemd stuff
  install -Dm644 65-kvm.rules "${pkgdir:?}/usr/lib/udev/rules.d/65-kvm.rules"

  # remove conflicting /var/run directory
  rm -fr "${pkgdir:?}/var"

  # bridge_helper needs suid
  # https://bugs.archlinux.org/task/32565
  chmod u+s "${pkgdir:?}/usr/lib/qemu/qemu-bridge-helper"

  # remove split block modules
  rm "${pkgdir:?}/usr/lib/qemu/block-"{iscsi,rbd,gluster}.so

  # remove extra arch
  for _bin in "${pkgdir:?}/usr/bin/qemu-"*; do

    [[ -f "${_bin}" ]] || continue

    case "${_bin##*qemu-}" in
    # guest agent
    ga)
      rm "${_bin}"
      continue
      ;;
    # tools
    edid | img | io | keymap | nbd | pr-helper | storage-daemon)
      continue
      ;;
      # core emu
    x86_64 | system-x86_64)
      continue
      ;;
    esac

    mv "${_bin}" "${srcdir:?}/extra-arch-${1:?}/usr/bin/${_bin##*/}"

  done

  for _blob in "${pkgdir:?}/usr/share/qemu/"*; do

    [[ -f "${_blob}" ]] || continue

    case "${_blob##*/}" in
    # provided by seabios package
    bios.bin | bios-256k.bin | vgabios-cirrus.bin | vgabios-qxl.bin | \
      vgabios-stdvga.bin | vgabios-vmware.bin | vgabios-virtio.bin | vgabios-bochs-display.bin | \
      vgabios-ramfb.bin)
      rm "${_blob}"
      continue
      ;;

    # provided by edk2-ovmf package
    edk2-*)
      rm "${_blob}"
      continue
      ;;

    # iPXE ROMs
    efi-* | pxe-*)
      continue
      ;;

    # core blobs
    bios-microvm.bin | kvmvapic.bin | linuxboot* | multiboot.bin | sgabios.bin | vgabios*)
      continue
      ;;

    # Trace events definitions
    trace-events*)
      continue
      ;;
    esac

    mv "${_blob}" "${srcdir:?}/extra-arch-${1:?}/usr/share/qemu/${_blob##*/}"

  done

  # provided by edk2-ovmf package
  rm -rf "${pkgdir:?}/usr/share/qemu/firmware"

  if [ "${1:?}" = "headless" ]; then
    rm -rf "${pkgdir:?}/usr/share/"{applications,icons}
  fi

}

package_qemu-arch-extra+clang() {

  pkgdesc="QEMU for foreign architectures"
  depends=(
    dtc
    fuse3
    gcc-libs
    gnutls
    libaio
    libbpf libbpf.so
    glib2 libgio-2.0.so libglib-2.0.so libgobject-2.0.so libgmodule-2.0.so
    libjpeg libjpeg.so
    libpng
    libsasl
    libseccomp libseccomp.so
    libslirp libslirp.so
    liburing liburing.so
    lzo
    ndctl
    numactl libnuma.so
    pam libpam.so
    pixman libpixman-1.so
    snappy
    systemd-libs
    libudev.so
    qemu
    vde2
    zlib
    zstd
    libzstd.so
  )
  optdepends=(
    'edk2-armvirt: for aarch64 UEFI support'
    'edk2-ovmf: for ia32 and x64 UEFI support'
  )
  provides=(qemu-headless-arch-extra qemu-arch-extra "qemu-arch-extra=${pkgver}")
  conflicts=(qemu-headless-arch-extra qemu-arch-extra)

  mv -v extra-arch-full/usr "${pkgdir:?}"

}

package_qemu-headless-arch-extra+clang() {

  pkgdesc="QEMU without GUI, for foreign architectures"
  depends=(
    dtc
    fuse3
    gcc-libs
    gnutls
    libaio
    libbpf libbpf.so
    glib2 libgio-2.0.so libglib-2.0.so libgobject-2.0.so libgmodule-2.0.so
    libjpeg libjpeg.so
    libpng
    libsasl
    libseccomp libseccomp.so
    libslirp libslirp.so
    liburing liburing.so
    lzo
    ndctl
    numactl libnuma.so
    pam libpam.so
    pixman libpixman-1.so
    snappy
    qemu-headless
    systemd-libs libudev.so
    vde2
    zlib
    zstd libzstd.so
  )
  optdepends=(
    'edk2-armvirt: for aarch64 UEFI support'
    'edk2-ovmf: for ia32 and x64 UEFI support'
  )

  provides=(qemu-headless-arch-extra "qemu-headless-arch-extra=${pkgver}")
  conflicts=(qemu-headless-arch-extra)

  mv -v extra-arch-headless/usr "${pkgdir:?}"

}

package_qemu-block-iscsi+clang() {

  pkgdesc="QEMU iSCSI block module"
  depends=(glibc libiscsi)
  provides=(qemu-block-iscsi "qemu-block-iscsi=${pkgver}")
  conflicts=(qemu-block-iscsi)

  install -vDm 755 build-full/block-iscsi.so -t "${pkgdir:?}/usr/lib/qemu/"

}

package_qemu-block-rbd+clang() {

  pkgdesc="QEMU RBD block module"
  depends=(glibc ceph-libs)
  provides=(qemu-block-rbd "qemu-block-rbd=${pkgver}")
  conflicts=(qemu-block-rbd)

  install -vDm 755 build-full/block-rbd.so -t "${pkgdir:?}/usr/lib/qemu/"

}

package_qemu-block-gluster+clang() {

  pkgdesc="QEMU GlusterFS block module"
  depends=(glibc glusterfs)
  provides=(qemu-block-gluster "qemu-block-gluster=${pkgver}")
  conflicts=(qemu-block-gluster)

  install -vDm 755 build-full/block-gluster.so -t "${pkgdir:?}/usr/lib/qemu/"

}

package_qemu-guest-agent+clang() {

  pkgdesc="QEMU Guest Agent"
  depends=(gcc-libs glib2 libudev.so liburing)
  install=qemu-guest-agent.install
  provides=(qemu-guest-agent "qemu-guest-agent=${pkgver}")
  conflicts=(qemu-guest-agent)

  install -vDm 755 build-full/qga/qemu-ga -t "${pkgdir:?}/usr/bin/"
  install -vDm 644 qemu-guest-agent.service -t "${pkgdir:?}/usr/lib/systemd/system/"
  install -vDm 755 "${srcdir:?}/qemu-${pkgver}/scripts/qemu-guest-agent/fsfreeze-hook" -t "${pkgdir:?}/etc/qemu/"

}
