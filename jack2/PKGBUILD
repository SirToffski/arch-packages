pkgbase=jack2+clang
pkgname=('jack2+clang' 'jack2-dbus+clang')
pkgdesc="The JACK low-latency audio server"
pkgver=1.9.18
pkgrel=2
arch=('x86_64')
url="https://github.com/jackaudio/jack2"
license=('GPL2' 'LGPL2.1')
makedepends=('alsa-lib' 'celt' 'dbus' 'expat' 'git' 'libffado' 'libsamplerate'
  'libsndfile' 'zita-alsa-pcmi' 'zita-resampler' 'readline' 'systemd' 'waf')
source=("jack2::git+https://github.com/jackaudio/jack2.git#tag=v${pkgver}")
validpgpkeys=('62B11043D2F6EB6672D93103CDBAA37ABC74FBA0') # falkTX <falktx@falktx.com>
sha512sums=('SKIP')

_llvm=0

prepare() {

  if clang --version 2>/dev/null | grep -iq "clang\s*version\s*[0-9]" && ld.lld --version 2>/dev/null | grep -iq "LLD\s*[0-9]"; then
    _llvm=1
  fi

  cd "${srcdir:?}/jack2" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/jack2 directory! Prepare Failed! \E[0m"
    exit 1
  )

  # copying relevant custom waf scripts and loading them specifically using
  # wscript
  (
    touch __init__.py
    mkdir -vp tools
    cp -v waflib/extras/xcode*.py tools
    rm -rv waflib
    sed -e "s/load('xcode'/load('xcode', tooldir='tools'/g" \
      -e "s/load('xcode6'/load('xcode6', tooldir='tools'/g" \
      -i wscript
  )

}

build() {

  cd "${srcdir:?}/jack2" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/jack2 directory! Build Failed! \E[0m"
    exit 1
  )

  if [[ ${_llvm} -eq 1 ]]; then

    CFLAGS="${CFLAGS} -flto=thin"
    CXXFLAGS="${CXXFLAGS} -flto=thin"
    LDFLAGS="${LDFLAGS} -flto=thin"

  fi

  export LINKFLAGS="${LDFLAGS}"
  export PYTHONPATH="${PWD}:${PYTHONPATH}"
  waf configure --prefix=/usr \
    --htmldir="/usr/share/doc/${pkgbase}/" \
    --autostart=none \
    --systemd-unit \
    --classic \
    --dbus

  waf build

}

package_jack2+clang() {

  depends=('db' 'gcc-libs' 'glibc' 'opus' 'libasound.so' 'libcelt0.so'
    'libdbus-1.so' 'libreadline.so' 'libsamplerate.so' 'libsndfile.so'
    'libsystemd.so' 'libzita-alsa-pcmi.so' 'libzita-resampler.so')
  optdepends=('a2jmidid: for ALSA MIDI to JACK MIDI bridging'
    'libffado: for firewire support using FFADO'
    'jack2-dbus: for dbus integration'
    'realtime-privileges: for realtime privileges'
    'zita-ajbridge: for using multiple ALSA devices')
  provides=('jack' 'jack2' "jack2=${pkgver}" 'libjack.so' 'libjacknet.so' 'libjackserver.so')
  conflicts=('jack' 'jack2')

  cd "${srcdir:?}/jack2" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/jack2 directory! Package jack2 Failed! \E[0m"
    exit 1
  )

  export PYTHONPATH="${PWD}:${PYTHONPATH}"
  waf install --destdir="${pkgdir:?}"
  rm -rfv "${pkgdir:?}/usr/bin/jack"{dbus,_control} "${pkgdir:?}/usr/share/dbus-1/"

}

package_jack2-dbus+clang() {

  local _names=('alias' 'bufsize' 'connect' 'cpu' 'cpu_load' 'disconnect'
    'evmon' 'freewheel' 'iodelay' 'latent_client' 'load' 'lsp' 'metro'
    'midi_dump' 'midi_latency_test' 'midiseq' 'midisine' 'monitor_client'
    'multiple_metro' 'net_master' 'net_slave' 'netsource' 'property' 'rec'
    'samplerate' 'server_control' 'session_notify' 'showtime' 'simdtests'
    'simple_client' 'simple_session_client' 'test' 'thru' 'transport' 'unload'
    'wait' 'zombie')

  pkgdesc+=" (dbus integration)"
  depends=('gcc-libs' 'glibc' "jack2+clang=${pkgver}" 'libdbus-1.so' 'libjackserver.so'
    'python-dbus')
  provides=('jack2-dbus' "jack2-dbus=${pkgver}")
  conflicts=('jack2-dbus')

  cd "${srcdir:?}/jack2" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/jack2 directory! Package jack2-dbus Failed! \E[0m"
    exit 1
  )

  export PYTHONPATH="${PWD}:${PYTHONPATH}"
  waf install --destdir="${pkgdir:?}"
  rm -rfv "${pkgdir:?}/etc/" "${pkgdir:?}/usr/include/" "${pkgdir:?}/usr/lib/" \
    "${pkgdir:?}/usr/share/man/" "${pkgdir:?}/usr/bin/alsa"* "${pkgdir:?}/usr/bin/jackd"
  for _name in "${_names[@]}"; do
    rm -v "${pkgdir:?}/usr/bin/jack_${_name}"
  done

}
