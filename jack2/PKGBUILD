pkgbase=jack2+clang
pkgname=('jack2+clang' 'jack2-dbus+clang' 'jack2-docs+clang')
pkgdesc="The JACK low-latency audio server"
pkgver=1.9.20
pkgrel=3
arch=('x86_64')
url="https://github.com/jackaudio/jack2"
license=('GPL2' 'LGPL2.1')
makedepends=(alsa-lib dbus doxygen expat git libffado libsamplerate opus systemd waf)
source=("jack2::git+https://github.com/jackaudio/jack2.git#tag=v${pkgver}")
validpgpkeys=('62B11043D2F6EB6672D93103CDBAA37ABC74FBA0') # falkTX <falktx@falktx.com>
sha256sums=('SKIP')

_llvm=0

prepare() {

  if clang --version 2>/dev/null | grep -iq "clang\s*version\s*[0-9]" && ld.lld --version 2>/dev/null | grep -iq "LLD\s*[0-9]"; then
    _llvm=1
  fi

  cd "${srcdir:?}/jack2" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/jack2 directory! Prepare Failed! \E[0m"
    exit 1
  )

  # copying relevant custom waf scripts and loading them specifically using
  # wscript
  (
    touch __init__.py
    rm -rv waflib
  )

}

_pick() {
  local p="$1" f d
  shift
  for f; do
    d="$srcdir/$p/${f#$pkgdir/}"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

build() {

  cd "${srcdir:?}/jack2" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/jack2 directory! Build Failed! \E[0m"
    exit 1
  )

  if [[ ${_llvm} -eq 1 ]]; then

    CFLAGS="${CFLAGS} -flto=thin"
    CXXFLAGS="${CXXFLAGS} -flto=thin"
    LDFLAGS="${LDFLAGS} -fuse-ld=lld"

  fi

  export LINKFLAGS="${LDFLAGS}"
  export PYTHONPATH="${PWD}:${PYTHONPATH}"

  waf configure --prefix=/usr \
    --htmldir="/usr/share/doc/${pkgbase}/html" \
    --autostart=none \
    --doxygen=yes \
    --example-tools=no \
    --systemd-unit \
    --classic \
    --dbus

  waf build

}

package_jack2+clang() {

  license+=(LGPL2.1)
  depends=(db gcc-libs glibc opus libasound.so libdbus-1.so libsamplerate.so
    libsystemd.so)
  optdepends=(
    'a2jmidid: for ALSA MIDI to JACK MIDI bridging'
    'libffado: for firewire support using FFADO'
    'jack-example-tools: for official JACK example-clients and tools'
    'jack2-dbus: for dbus integration'
    'jack2-docs: for developer documentation'
    'realtime-privileges: for realtime privileges'
    'zita-ajbridge: for using multiple ALSA devices'
  )

  provides=('jack' 'jack2' "jack2=${pkgver}" 'libjack.so' 'libjacknet.so' 'libjackserver.so')
  conflicts=('jack' 'jack2')

  cd "${srcdir:?}/jack2" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/jack2 directory! Package jack2 Failed! \E[0m"
    exit 1
  )

  export PYTHONPATH="${PWD}:${PYTHONPATH}"
  waf install --destdir="${pkgdir:?}"

  cd "${pkgdir:?}" || (
    echo -e "\E[1;31mCan't cd to ${pkgdir:?} directory! Package jack2 Failed! \E[0m"
    exit 1
  )

  _pick jack2-dbus usr/bin/jack{dbus,_control}
  _pick jack2-dbus usr/share/dbus-1/services/*
  _pick jack2-docs usr/share/doc/${pkgbase}/html

}

package_jack2-dbus+clang() {

  pkgdesc+=" (dbus integration)"
  depends=('gcc-libs' 'glibc' "jack2+clang=${pkgver}" libexpat.so 'libdbus-1.so' 'libjackserver.so'
    'python-dbus')
  provides=('jack2-dbus' "jack2-dbus=${pkgver}")
  conflicts=('jack2-dbus')

  mv -v jack2-dbus/* "${pkgdir:?}"

}

package_jack2-docs+clang() {

  pkgdesc+=" (documentation)"
  conflicts=('jack2-docs')

  mv -v jack2-docs/* "${pkgdir:?}"

}
